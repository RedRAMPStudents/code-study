//define pin numbers
const int button = 32;
const int buttonTwo = 33;
const int joyButton = 5;
const int joystickX = 2;
const int joystickY = 26;
const int buzzerPin = 40;

//define button states
int buttonState=HIGH;
int buttonStateTwo = HIGH;
int joyButtonState = HIGH;

//define variables
int pause;
double m;
double h;
int w;


//define constants 
int Xceil = 1000;
int Xfloor = 100;
int Yceil = 1000;
int TestTest=0;

/*
 * c is the variable for number of cycles, this tells us when a study/rest cycle is complete. g serves as our timer for this program, 
 * counting out the number of seconds passed.
 */
int c = 0;
int g=0;


void setup() {
  //initialize seiral monitor and pins 
  Serial.begin(9600);
  pinMode(button, INPUT_PULLUP);
  pinMode(buttonTwo, INPUT_PULLUP);
  pinMode(joyButton, INPUT_PULLUP);

  //startup tone and LED flash when you plug in the board
  tone(40, 523, 500);
  digitalWrite(BLUE_LED, HIGH);
  delay(130);
  digitalWrite(BLUE_LED, LOW);
  digitalWrite(GREEN_LED, HIGH);
  tone(40, 1047, 500);
  
  delay(1000);
  digitalWrite(BLUE_LED, HIGH);
  digitalWrite(GREEN_LED, HIGH);
  delay(1000);
  noTone(buzzerPin);   
  digitalWrite(BLUE_LED, LOW);
  digitalWrite(GREEN_LED, LOW);
}

void loop() {

  //HOLD DOWN button 1 to use the Stick Flicker function and start the study session timer
  buttonState = digitalRead(button);
  if(buttonState == LOW){
  StickFlicker();
    
  /*
   * This while loop helps countain the study/rest cycle, and leave it when needed.
   */
  while(buttonStateTwo==HIGH){
    delay(1000);
    buttonStateTwo = digitalRead(buttonTwo);
    ++g;
    Serial.println(g);
    if(g%2==0){
      digitalWrite(RED_LED, HIGH);
    }
    else{
      digitalWrite(RED_LED, LOW);
    }
    //press the joystick button to pause your study session, then press againt to resume 
    joyButtonState = digitalRead(joyButton);
    if(joyButtonState==LOW){
      tone(40, 392, 500);
      digitalWrite(BLUE_LED, HIGH);
      
        //delay between pulse
      delay(130);
      digitalWrite(BLUE_LED, LOW);
      digitalWrite(GREEN_LED, HIGH);
      tone(40, 587, 500);
      
      delay(1000);
      digitalWrite(BLUE_LED, HIGH);
      digitalWrite(GREEN_LED, HIGH);
      delay(1000);
      noTone(buzzerPin);   
      digitalWrite(BLUE_LED, LOW);
      digitalWrite(GREEN_LED, LOW);
    pause=1;
    delay(1000);
    }
   else{
    pause=0;
    }

  while(pause == 1){
    digitalWrite(RED_LED, HIGH);
  joyButtonState = digitalRead(joyButton);
  if(joyButtonState==LOW){
    tone(40, 587, 500);
    digitalWrite(GREEN_LED, HIGH);
    
      //delay between pulse
    delay(130);
    digitalWrite(GREEN_LED, LOW);
    digitalWrite(BLUE_LED, HIGH);
    tone(40, 392, 500);
    
    delay(1000);
    digitalWrite(GREEN_LED, HIGH);
    digitalWrite(BLUE_LED, HIGH);
    delay(1000);
    noTone(buzzerPin);   
    digitalWrite(BLUE_LED, LOW);
    digitalWrite(GREEN_LED, LOW);
    pause=0;
    }
  else{
   pause=1;
   }
  }
/*
 * The buzzer goes off after 20 minutes the first time (20 seconds in this prototype) and then every 30 minutes subsequently. The formula "g-c*30==20"
 * helps ensure it will go off at these times. Shoutout to Mrs. Fang for the Calc 2 series lesson
 */
  if(g-c*1500==1200){
    while(buttonState == HIGH){
  
      buttonState = digitalRead(button);
    
      tone(buzzerPin, 277, 1000);
  
        //delay between pulse
      delay(1300);
   
      noTone(buzzerPin);   
      buttonState = digitalRead(button);
      }
     buttonState=HIGH;
     }
/*
 * The rest buzzer goes off for the first time at 25 minuts, and every 25 minutes after; this formula helps ensure that
 */
  if(g%1500==0){
   while(buttonState == HIGH){
  
    buttonState = digitalRead(button);
   
    //buzzer tone signalling break period
    tone(40, 1047, 100);

      //delay between pulse
    delay(130);
    tone(40, 1047, 100);
    delay(1000);
    
    noTone(buzzerPin);   
    buttonState = digitalRead(button);
    }
    buttonState=HIGH;
    ++c;
    }
   }
  //celebratory tone signalling the end of your study session
  tone(40, 659, 250);
    //delay between pulse
  delay(130);
  tone(40, 784, 250);
  delay(130);
  tone(40, 1319, 250);
  delay(130);
  tone(40, 1047, 250);
  delay(130);
  tone(40, 1175, 250);
  delay(130);
  tone(40, 1568, 250);
    //delay between pulse
  delay(1000);
  noTone(buzzerPin); 

  //Print length of study session to the serial monitor
  m = (double)g/60;       
  h = (double)g/3600;      
  w = m;
  
  //Print session length in hours if your session was longer than one hour
  if(g>=3600){
    Serial.print("You had a ");
  
  Serial.print(h);
  Serial.println(" hour study session!");
  }
  //Print session length in minutes
  else{
  
  Serial.print("You had a ");
  Serial.print(m);
  Serial.println(" minute study session!");
  }
  Serial.print(g);
  Serial.print("\t");
  Serial.println(c);
  delay(100);
  int d=4;
  while(d==4){
  
}

}
}

void StickFlicker (){
 int Xaxis = analogRead(joystickX);
 int Yaxis = analogRead(joystickY);
  while(Xaxis<Xceil&&Xaxis>Xfloor&&Yaxis<Yceil){
    Xaxis = analogRead(joystickX);
    Yaxis = analogRead(joystickY);
    if (Xaxis>998){
      TestTest = 1;
    }
    else if (Xaxis<102){
      TestTest = 2;
    }
    else if (Yaxis>998){
      TestTest = 3;
    }
    }
  
  delay(100);
  if (TestTest == 1){
    //flick joystick to the right if you're doing Test Prep
    Serial.println("Test Prep");
    delay(100);
    TestTest=0;
  }
  else if (TestTest == 2){
    //flick the joystick to the left if you're doing Group Work
    Serial.println("Group Work");
    delay(100);
    TestTest=0;
  }
  else if(TestTest == 3){
    //flick the joystick forwards if you're doing Homework
    Serial.println("Homework");
    TestTest=0;
  }
  else if(TestTest<1&&TestTest>3){
    Serial.println("Didn't work :(");
    delay(100);
  }
}
