//define pin numbers
#include <SPI.h>
#include <WiFi.h>
#include <PubSubClient.h>
#include <stdio.h>
int trigger = 1;
const int button = 32;
const int buttonTwo = 33;
const int joyButton = 5;
const int joystickX = 2;
const int joystickY = 26;
const int buzzerPin = 40;
int JoystickPosition = 0;

//define button states
int buttonState=HIGH;
int buttonStateTwo = HIGH;
int joyButtonState = HIGH;

//define variables
int pause;
double m;
double h;
int w;


//define constants 
int Xceil = 1000;
int Xfloor = 100;
int Yceil = 1000;
int TestTest=0;

// your network name also called SSID
char ssid[] = "Mayfair"; // Replaced SSID with your WiFi router Name
// your network password
char password[] = "FarBar642677";  // Replace PASSWORD with your router password
// MQTTServer to use
char server[] = "io.adafruit.com";
char Adafruit_user_name[] = "seags"; // Replace xxx with your Adafruit User Name
char Adafruit_IO_KEY[] = "aio_crfy444qe6j8naxYNPJE7lBIhySJ";  //Replace IO_KEY with the Adafruit IO_KEY
String Adafruit_Feed_Name = "Study_Buddy"; // Repleace Feed_Name with Adafruit feed name
char JoystickString[16];// string that we are creating
void callback(char* topic, byte* payload, unsigned int length) {
  Serial.print("Received message for topic ");
  Serial.print(topic);
  Serial.print("with length ");
  Serial.println(length);
  Serial.println("Message:");
  Serial.write(payload, length);
  Serial.println();
}
WiFiClient wifiClient;
PubSubClient client(server, 1883, callback, wifiClient);
/*
 * c is the variable for number of cycles, this tells us when a study/rest cycle is complete. g serves as our timer for this program, 
 * counting out the number of seconds passed.
 */
int c = 0;
int g=0;


void setup() {
  //initialize seiral monitor and pins 
  Serial.begin(115200);
  pinMode(button, INPUT_PULLUP);
  pinMode(buttonTwo, INPUT_PULLUP);
  pinMode(joyButton, INPUT_PULLUP);

  //startup tone and LED flash when you plug in the board
  tone(40, 523, 500);
  digitalWrite(BLUE_LED, HIGH);
  delay(130);
  digitalWrite(BLUE_LED, LOW);
  digitalWrite(GREEN_LED, HIGH);
  tone(40, 1047, 500);
  
  delay(1000);
  digitalWrite(BLUE_LED, HIGH);
  digitalWrite(GREEN_LED, HIGH);
  delay(1000);
  noTone(buzzerPin);   
  digitalWrite(BLUE_LED, LOW);
  digitalWrite(GREEN_LED, LOW);

  

  pinMode(joystickX, INPUT);
  pinMode(joystickY, INPUT);
  //pinMode(button1, INPUT);
  // Start Ethernet with the build in MAC Address
  // attempt to connect to Wifi network:
  Serial.print("Attempting to connect to Network named: ");
  // print the network name (SSID);
  Serial.println(ssid);
  // Connect to WPA/WPA2 network. Change this line if using open or WEP network:
  WiFi.begin(ssid, password);
  while ( WiFi.status() != WL_CONNECTED) {
    // print dots while we wait to connect
    Serial.print(".");
    delay(300);
  }
  Serial.println("\nYou're connected to the network");
  Serial.println("Waiting for an ip address");
  while (WiFi.localIP() == INADDR_NONE) {
    // print dots while we wait for an ip addresss
    Serial.print(".");
    delay(300);
  }
  Serial.println("\nIP Address obtained");
  // We are connected and have an IP address.
  // Print the WiFi status.
  printWifiStatus();
  /* Enable internal pullup.
   * Without the pin will float and the example will not work */
  attachInterrupt(button, sendRequest, FALLING); // Interrupt is fired whenever button is pressed
  Serial.println("Hold the button, and choose a study direction!");
}

void loop() {

  //HOLD DOWN button 1 to use the Stick Flicker function and start the study session timer
 while(trigger == 1){
    StickFlicker ();
    Adafruit_trigger(Adafruit_IO_KEY, Adafruit_Feed_Name);
    trigger = 0;
    JoystickPosition = 0; //resets Joystick Position to a neutral position
  }
  /*
   * This while loop helps countain the study/rest cycle, and leave it when needed.
   */
  while(buttonStateTwo==HIGH){
    delay(1000);
    buttonStateTwo = digitalRead(buttonTwo);
    ++g;
    Serial.println(g);
    if(g%2==0){
      digitalWrite(RED_LED, HIGH);
    }
    else{
      digitalWrite(RED_LED, LOW);
    }
    //press the joystick button to pause your study session, then press againt to resume 
    joyButtonState = digitalRead(joyButton);
    if(joyButtonState==LOW){
      tone(40, 392, 500);
      digitalWrite(BLUE_LED, HIGH);
      
        //delay between pulse
      delay(130);
      digitalWrite(BLUE_LED, LOW);
      digitalWrite(GREEN_LED, HIGH);
      tone(40, 587, 500);
      
      delay(1000);
      digitalWrite(BLUE_LED, HIGH);
      digitalWrite(GREEN_LED, HIGH);
      delay(1000);
      noTone(buzzerPin);   
      digitalWrite(BLUE_LED, LOW);
      digitalWrite(GREEN_LED, LOW);
    pause=1;
    delay(1000);
    }
   else{
    pause=0;
    }

  while(pause == 1){
    digitalWrite(RED_LED, HIGH);
  joyButtonState = digitalRead(joyButton);
  if(joyButtonState==LOW){
    tone(40, 587, 500);
    digitalWrite(GREEN_LED, HIGH);
    
      //delay between pulse
    delay(130);
    digitalWrite(GREEN_LED, LOW);
    digitalWrite(BLUE_LED, HIGH);
    tone(40, 392, 500);
    
    delay(1000);
    digitalWrite(GREEN_LED, HIGH);
    digitalWrite(BLUE_LED, HIGH);
    delay(1000);
    noTone(buzzerPin);   
    digitalWrite(BLUE_LED, LOW);
    digitalWrite(GREEN_LED, LOW);
    pause=0;
    }
  else{
   pause=1;
   }
  }
/*
 * The buzzer goes off after 20 minutes the first time (20 seconds in this prototype) and then every 30 minutes subsequently. The formula "g-c*30==20"
 * helps ensure it will go off at these times. Shoutout to Mrs. Fang for the Calc 2 series lesson
 */
  if(g-c*1500==1200){
    while(buttonState == HIGH){
  
      buttonState = digitalRead(button);
    
      tone(buzzerPin, 277, 1000);
  
        //delay between pulse
      delay(1300);
   
      noTone(buzzerPin);   
      buttonState = digitalRead(button);
      }
     buttonState=HIGH;
     }
/*
 * The rest buzzer goes off for the first time at 25 minuts, and every 25 minutes after; this formula helps ensure that
 */
  if(g%1500==0){
   while(buttonState == HIGH){
  
    buttonState = digitalRead(button);
   
    //buzzer tone signalling break period
    tone(40, 1047, 100);

      //delay between pulse
    delay(130);
    tone(40, 1047, 100);
    delay(1000);
    
    noTone(buzzerPin);   
    buttonState = digitalRead(button);
    }
    buttonState=HIGH;
    ++c;
    }
   }
  //celebratory tone signalling the end of your study session
  tone(40, 659, 250);
    //delay between pulse
  delay(130);
  tone(40, 784, 250);
  delay(130);
  tone(40, 1319, 250);
  delay(130);
  tone(40, 1047, 250);
  delay(130);
  tone(40, 1175, 250);
  delay(130);
  tone(40, 1568, 250);
    //delay between pulse
  delay(1000);
  noTone(buzzerPin); 

  //Print length of study session to the serial monitor
  m = (double)g/60;       
  h = (double)g/3600;      
  w = m;
  
  //Print session length in hours if your session was longer than one hour
  if(g>=3600){
    Serial.print("You had a ");
  
  Serial.print(h);
  Serial.println(" hour study session!");
  }
  //Print session length in minutes
  else{
  
  Serial.print("You had a ");
  Serial.print(m);
  Serial.println(" minute study session!");
  }
  Serial.print(g);
  Serial.print("\t");
  Serial.println(c);
  delay(100);
  int d=4;
  while(d==4){
  
}

}



void StickFlicker (){
   int Xaxis = analogRead(joystickX);
   int Yaxis = analogRead(joystickY);
   int k;
   while(Xaxis<Xceil&&Xaxis>Xfloor&&Yaxis<Yceil){
      digitalWrite(BLUE_LED, HIGH);
      digitalWrite(GREEN_LED, HIGH);
      digitalWrite(RED_LED, HIGH);

      Xaxis = analogRead(joystickX);
      Yaxis = analogRead(joystickY);
      if (Xaxis>998){
        JoystickPosition = 1;
      }
      else if (Xaxis<102){
       JoystickPosition = 2;
      }
      else if (Yaxis>998){
        JoystickPosition = 3;
      }
        else if (Yaxis<102){
         JoystickPosition = 4;
      }
   }
   digitalWrite(BLUE_LED, LOW);
      digitalWrite(GREEN_LED, LOW);
      digitalWrite(RED_LED, LOW);
}
void sendRequest(){
  if(trigger == 0){
    trigger = 1;
  }
}
void printWifiStatus() {
  // print the SSID of the network you're attached to:
  Serial.print("SSID: ");
  Serial.println(WiFi.SSID());
  // print your WiFi IP address:
  IPAddress ip = WiFi.localIP();
  Serial.print("IP Address: ");
  Serial.println(ip);
  // print the received signal strength:
  long rssi = WiFi.RSSI();
  Serial.print("signal strength (RSSI):");
  Serial.print(rssi);
  Serial.println(" dBm");
}
String Adafruit_trigger(String KEY, String EVENT) {
  // Reconnect if the connection was lost
  printWifiStatus();
  if (!client.connected()) {
    Serial.println("Disconnected. Reconnecting....");
    //Line below is the master code
    //if(!client.connect("energiaClient", "[ADAFRUIT_USERNAME]", "[ADAFRUIT_IO_KEY]")) {
    if(!client.connect("energiaClient", Adafruit_user_name, Adafruit_IO_KEY)) {
      Serial.println("Connection failed");
    } else {
      Serial.println("Connection success");
      //dab ... line below is the master code
      //if(client.subscribe("[ADAFRUIT_USERNAME]/feeds/inTopic")) {
      // In the line below ... replace [ADAFRUIT_USERNAME] with the actual name.  Don't include the [].  Change button_1 if you are using another topic
      if(client.subscribe("seags/feeds/aio_crfy444qe6j8naxYNPJE7lBIhySJ")) {
        Serial.println("Subscription successful");
      }
      }
    }
    // In the line below ... replace [ADAFRUIT_USERNAME] with the actual name.  Don't include the [].  Change button_1 if you are using another topic
    sprintf(JoystickString, "%d", JoystickPosition);//creating joystick string formatted by %d, creating a string value by the Joystick Position
    if(client.publish("seags/feeds/aio_crfy444qe6j8naxYNPJE7lBIhySJ", JoystickString)) {
      Serial.println("Publish success");
      } else {
      Serial.println("Publish failed");
    }
    client.disconnect();
    delay(1000);
    return "SUCCESS";
}
